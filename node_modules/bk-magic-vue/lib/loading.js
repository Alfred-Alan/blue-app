(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = global || self, factory(global.library = {}, global.Vue));
}(this, function (exports, Vue) { 'use strict';

  Vue = Vue && Vue.hasOwnProperty('default') ? Vue['default'] : Vue;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function isVNode(node) {
    return node && _typeof(node) === 'object' && node.hasOwnProperty('componentOptions');
  }
  var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
    window.setTimeout(callback, 1000 / 60);
  };
  var cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {
    window.clearTimeout(id);
  };
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var camelCase = function camelCase(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
  };
  var getStyle = Number(document.documentMode) < 9 ? function (element, styleName) {
    if (!element || !styleName) return null;
    styleName = camelCase(styleName);
    if (styleName === 'float') {
      styleName = 'styleFloat';
    }
    try {
      switch (styleName) {
        case 'opacity':
          try {
            return element.filters.item('alpha').opacity / 100;
          } catch (e) {
            return 1.0;
          }
        default:
          return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
      }
    } catch (e) {
      return element.style[styleName];
    }
  } : function (element, styleName) {
    if (!element || !styleName) return null;
    styleName = camelCase(styleName);
    if (styleName === 'float') {
      styleName = 'cssFloat';
    }
    try {
      var computed = document.defaultView.getComputedStyle(element, '');
      return element.style[styleName] || computed ? computed[styleName] : null;
    } catch (e) {
      return element.style[styleName];
    }
  };

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _global = createCommonjsModule(function (module) {
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    : Function('return this')();
  if (typeof __g == 'number') __g = global;
  });

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.6.11' };
  if (typeof __e == 'number') __e = core;
  });
  var _core_1 = _core.version;

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function () {
      return fn.apply(that, arguments);
    };
  };

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var document$1 = _global.document;
  var is = _isObject(document$1) && _isObject(document$1.createElement);
  var _domCreate = function (it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });

  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {  }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var PROTOTYPE = 'prototype';
  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has(exports, key)) continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      : IS_BIND && own ? _ctx(out, _global)
      : IS_WRAP && target[key] == out ? (function (C) {
        var F = function (a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0: return new C();
              case 1: return new C(a);
              case 2: return new C(a, b);
            } return new C(a, b, c);
          } return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
      }
    }
  };
  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  var _export = $export;

  _export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

  var $Object = _core.Object;
  var defineProperty = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
  };

  var defineProperty$1 = defineProperty;

  var hasInitZIndex = false;
  var zIndex;
  (function () {
    if (!window['__bk_zIndex_manager']) {
      var zIndexManager = {
        nextZIndex: function nextZIndex() {
          var zIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';
          return zIndex === 'default' ? zIndexManager.zIndex++ : zIndex;
        },
        nextTickIndex: function nextTickIndex() {
          var tick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
          var zIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
          if (zIndex === 'default') {
            zIndexManager.zIndex += tick;
            return zIndexManager.zIndex;
          }
          return zIndex;
        }
      };
      defineProperty$1(zIndexManager, 'zIndex', {
        configurable: true,
        get: function get() {
          if (!hasInitZIndex) {
            zIndex = zIndex || (Vue.prototype.$BK_EL || {}).zIndex || 2000;
            hasInitZIndex = true;
          }
          return zIndex;
        },
        set: function set(value) {
          zIndex = value;
        }
      });
      window['__bk_zIndex_manager'] = zIndexManager;
    }
  })();
  var zIndexManager = window['__bk_zIndex_manager'];

  var script = {
    name: 'bk-loading',
    data: function data() {
      return {
        timer: 0,
        opacity: -1,
        color: '#ffffff',
        isShow: false,
        hide: false,
        title: '',
        type: 'full',
        size: 'large',
        theme: 'colorful',
        delay: 0,
        zIndex: 0,
        hasZIndexOption: false,
        extCls: ''
      };
    },
    computed: {
      bgColor: function bgColor() {
        var color = this.color.replace(/\s/gm, '');
        if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(color)) {
          var colors = color.substring(1).split('');
          if (colors.length === 3) {
            colors = [colors[0], colors[0], colors[1], colors[1], colors[2], colors[2]];
          }
          colors = '0x' + colors.join('');
          return 'rgba(' + [colors >> 16 & 255, colors >> 8 & 255, colors & 255].join(',') + ",".concat(this.opacity, ")");
        } else if (/^rgba?\(([^\)]+)\)/.test(color)) {
          return color.replace(/^rgb\(([^\)]+)\)/, "rgba($1,".concat(this.opacity, ")"));
        }
        return this.color;
      },
      computedClass: function computedClass() {
        return "bk-loading1 bk-".concat(this.theme, " bk-size-").concat(this.size);
      }
    },
    watch: {
      hide: function hide(newVal) {
        var _this = this;
        if (newVal) {
          var delay = isNaN(this.delay) ? 0 : Number(this.delay);
          clearTimeout(this.timer);
          if (delay > 0) {
            this.timer = setTimeout(function () {
              _this.hideLoading();
            }, delay);
          } else {
            this.hideLoading();
          }
        }
      },
      isShow: function isShow(newVal) {
        if (newVal && !this.hasZIndexOption) {
          this.zIndex = zIndexManager.nextZIndex();
        }
      }
    },
    mounted: function mounted() {
      this.hide = false;
    },
    methods: {
      hideLoading: function hideLoading() {
        this.isShow = false;
        this.$el.addEventListener('transitionend', this.destroyEl);
      },
      destroyEl: function destroyEl() {
        this.$el.removeEventListener('transitionend', this.destroyEl);
        this.$destroy();
        this.$el.parentNode.removeChild(this.$el);
      },
      animationFinish: function animationFinish() {
        if (this.afterLeave && typeof this.afterLeave === 'function') {
          this.afterLeave();
        }
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    }
    var options = typeof script === 'function' ? script.options : script;
    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true;
      if (isFunctionalTemplate) {
        options.functional = true;
      }
    }
    if (scopeId) {
      options._scopeId = scopeId;
    }
    var hook;
    if (moduleIdentifier) {
      hook = function hook(context) {
        context = context ||
        this.$vnode && this.$vnode.ssrContext ||
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        }
        if (style) {
          style.call(this, createInjectorSSR(context));
        }
        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      };
      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }
    if (hook) {
      if (options.functional) {
        var originalRender = options.render;
        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }
    return script;
  }
  var normalizeComponent_1 = normalizeComponent;

  /* script */
  var __vue_script__ = script;
  /* template */

  var __vue_render__ = function __vue_render__() {
    var _vm = this;

    var _h = _vm.$createElement;

    var _c = _vm._self._c || _h;

    return _c('transition', {
      attrs: {
        "name": "fade"
      },
      on: {
        "after-leave": _vm.animationFinish
      }
    }, [_c('div', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.isShow,
        expression: "isShow"
      }],
      staticClass: "bk-loading",
      class: _vm.extCls,
      style: {
        position: _vm.type === 'directive' ? 'absolute' : 'fixed',
        zIndex: _vm.zIndex,
        backgroundColor: _vm.bgColor
      }
    }, [_c('div', {
      staticClass: "bk-loading-wrapper"
    }, [_c('div', {
      class: _vm.computedClass
    }, [_c('div', {
      staticClass: "point point1"
    }), _c('div', {
      staticClass: "point point2"
    }), _c('div', {
      staticClass: "point point3"
    }), _c('div', {
      staticClass: "point point4"
    })]), _c('div', {
      staticClass: "bk-loading-title"
    }, [_vm._t("default", [_vm._v(_vm._s(_vm.title))])], 2)])])]);
  };

  var __vue_staticRenderFns__ = [];
  /* style */

  var __vue_inject_styles__ = undefined;
  /* scoped */

  var __vue_scope_id__ = undefined;
  /* module identifier */

  var __vue_module_identifier__ = undefined;
  /* functional template */

  var __vue_is_functional_template__ = false;
  /* style inject */

  /* style inject SSR */

  /* style inject shadow dom */

  var __vue_component__ = normalizeComponent_1({
    render: __vue_render__,
    staticRenderFns: __vue_staticRenderFns__
  }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

  var LoadingConstructor = Vue.extend(__vue_component__);
  var instance;
  var Loading = function Loading() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (typeof options === 'string') {
      options = {
        title: options
      };
    }
    options.opacity = options.opacity || 0.9;
    options.color = options.color || '#ffffff';
    instance = new LoadingConstructor({
      data: options
    });
    if (isVNode(instance.title)) {
      instance.$slots.default = [instance.title];
      instance.title = null;
    } else {
      delete instance.$slots.default;
    }
    instance.viewmodel = instance.$mount();
    document.body.appendChild(instance.viewmodel.$el);
    instance.$dom = instance.viewmodel.$el;
    instance.viewmodel.isShow = true;
    return instance.viewmodel;
  };
  Loading.hide = function () {
    instance.viewmodel.hide = true;
  };
  Vue.prototype.$bkLoading = Loading;

  _export(_export.S, 'Number', {
    isNaN: function isNaN(number) {
      return number != number;
    }
  });

  var isNan = _core.Number.isNaN;

  var isNan$1 = isNan;

  var Model = Vue.extend(__vue_component__);
  function show(el, options) {
    if (!el.$vm) {
      el.$vm = el.viewmodel.$mount();
      el.appendChild(el.$vm.$el);
    }
    Vue.nextTick(function () {
      el.$vm.isShow = true;
    });
  }
  function toggle(el, options) {
    if (!el.$vm) {
      el.$vm = el.viewmodel.$mount();
      el.appendChild(el.$vm.$el);
    }
    clearTimeout(el.$vm.timer);
    if (options.isLoading) {
      Vue.nextTick(function () {
        el.$vm.isShow = true;
      });
    } else {
      var delay = isNaN(options.delay) ? 0 : Number(options.delay);
      if (delay > 0) {
        el.$vm.timer = setTimeout(function () {
          el.$vm.isShow = false;
        }, delay);
      } else {
        el.$vm.isShow = false;
      }
    }
    if (options.title) {
      el.$vm.title = options.title;
    }
  }
  var bkLoading = {
    inserted: function inserted(el, binding) {
      var value = binding.value;
      var position = getComputedStyle(el).position;
      var options = {};
      if (!position || position !== 'relative' || position !== 'absolute') {
        el.style.position = 'relative';
      }
      for (var key in value) {
        if (key !== 'isLoading') {
          options[key] = value[key];
        }
      }
      options.type = 'directive';
      options.opacity = options.opacity || 0.9;
      options.color = options.color || '#ffffff';
      options.hasZIndexOption = typeof options.zIndex === 'number' && !isNan$1(options.zIndex);
      el.viewmodel = new Model({
        data: options
      });
      if (options.immediate) {
        show(el, binding.value);
      } else {
        toggle(el, binding.value);
      }
    },
    update: function update(el, binding) {
      toggle(el, binding.value);
    }
  };

  var index = {
    Loading: Loading,
    directive: bkLoading,
    install: function install(Vue) {
      Vue.directive('bkloading', bkLoading);
    }
  };

  exports.default = index;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
