(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.library = {}));
}(this, function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _toObject = function (it) {
    return Object(_defined(it));
  };

  var hasOwnProperty = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty.call(it, key);
  };

  var toString = {}.toString;
  var _cof = function (it) {
    return toString.call(it).slice(8, -1);
  };

  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  };

  var _toIobject = function (it) {
    return _iobject(_defined(it));
  };

  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  var min = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0;
  };

  var max = Math.max;
  var min$1 = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  };

  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);
      var length = _toLength(O.length);
      var index = _toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      } return !IS_INCLUDES && -1;
    };
  };

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var _core = createCommonjsModule(function (module) {
  var core = module.exports = { version: '2.6.11' };
  if (typeof __e == 'number') __e = core;
  });
  var _core_1 = _core.version;

  var _global = createCommonjsModule(function (module) {
  var global = module.exports = typeof window != 'undefined' && window.Math == Math
    ? window : typeof self != 'undefined' && self.Math == Math ? self
    : Function('return this')();
  if (typeof __g == 'number') __g = global;
  });

  var _shared = createCommonjsModule(function (module) {
  var SHARED = '__core-js_shared__';
  var store = _global[SHARED] || (_global[SHARED] = {});
  (module.exports = function (key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: _core.version,
    mode:  'pure' ,
    copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
  });
  });

  var id = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var shared = _shared('keys');
  var _sharedKey = function (key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO = _sharedKey('IE_PROTO');
  var _objectKeysInternal = function (object, names) {
    var O = _toIobject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
    while (names.length > i) if (_has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };

  var _enumBugKeys = (
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
  ).split(',');

  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  var _ctx = function (fn, that, length) {
    _aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1: return function (a) {
        return fn.call(that, a);
      };
      case 2: return function (a, b) {
        return fn.call(that, a, b);
      };
      case 3: return function (a, b, c) {
        return fn.call(that, a, b, c);
      };
    }
    return function () {
      return fn.apply(that, arguments);
    };
  };

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function (it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
  });

  var document = _global.document;
  var is = _isObject(document) && _isObject(document.createElement);
  var _domCreate = function (it) {
    return is ? document.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
  });

  var _toPrimitive = function (it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);
    P = _toPrimitive(P, true);
    _anObject(Attributes);
    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {  }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
  	f: f
  };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var PROTOTYPE = 'prototype';
  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has(exports, key)) continue;
      out = own ? target[key] : source[key];
      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
      : IS_BIND && own ? _ctx(out, _global)
      : IS_WRAP && target[key] == out ? (function (C) {
        var F = function (a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0: return new C();
              case 1: return new C(a);
              case 2: return new C(a, b);
            } return new C(a, b, c);
          } return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
      }
    }
  };
  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  var _export = $export;

  var _objectSap = function (KEY, exec) {
    var fn = (_core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
  };

  _objectSap('keys', function () {
    return function keys(it) {
      return _objectKeys(_toObject(it));
    };
  });

  var keys = _core.Object.keys;

  var keys$1 = keys;

  var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

  var space = '[' + _stringWs + ']';
  var non = '\u200b\u0085';
  var ltrim = RegExp('^' + space + space + '*');
  var rtrim = RegExp(space + space + '*$');
  var exporter = function (KEY, exec, ALIAS) {
    var exp = {};
    var FORCE = _fails(function () {
      return !!_stringWs[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    _export(_export.P + _export.F * FORCE, 'String', exp);
  };
  var trim = exporter.trim = function (string, TYPE) {
    string = String(_defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
  var _stringTrim = exporter;

  var $parseInt = _global.parseInt;
  var $trim = _stringTrim.trim;
  var hex = /^[-+]?0[xX]/;
  var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
  } : $parseInt;

  _export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

  var _parseInt$1 = _core.parseInt;

  var _parseInt$2 = _parseInt$1;

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  };

  _export(_export.S, 'Array', { isArray: _isArray });

  var isArray = _core.Array.isArray;

  function getPropByPath(obj, path, strict) {
    var tempObj = obj;
    path = path.replace(/\[(\w+)\]/g, '.$1');
    path = path.replace(/^\./, '');
    var keyArr = path.split('.');
    var i = 0;
    for (var len = keyArr.length; i < len - 1; ++i) {
      if (!tempObj && !strict) break;
      var key = keyArr[i];
      if (key in tempObj) {
        tempObj = tempObj[key];
      } else {
        if (strict) {
          throw new Error('please transfer a valid prop path to form item!');
        }
        break;
      }
    }
    return {
      o: tempObj,
      k: keyArr[i],
      v: tempObj ? tempObj[keyArr[i]] : null
    };
  }

  var columnIdSeed = 1;
  var defaults = {
    default: {
      order: ''
    },
    selection: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      align: 'is-center',
      headerAlign: 'is-center',
      order: '',
      className: 'bk-table-column-selection'
    },
    expand: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      align: 'is-center',
      headerAlign: 'is-center',
      order: '',
      className: 'bk-table-column-expand'
    },
    index: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      align: 'is-center',
      headerAlign: 'is-center',
      order: '',
      className: 'bk-table-column-index'
    },
    setting: {
      width: 42,
      minWidth: 42,
      realWidth: 42,
      headerAlign: 'is-center',
      order: '',
      className: 'bk-table-column-setting',
      icon: 'bk-icon icon-cog-shape'
    }
  };
  var forced = {
    selection: {
      renderHeader: function renderHeader(h, _ref) {
        var store = _ref.store;
        return h("bk-checkbox", {
          "attrs": {
            "disabled": store.isAllSelectionDisabled,
            "indeterminate": store.states.selection.length > 0 && !this.isAllSelected,
            "checked": this.isAllSelected
          },
          "nativeOn": {
            "click": this.toggleAllSelection
          }
        });
      },
      renderCell: function renderCell(h, _ref2) {
        var row = _ref2.row,
            column = _ref2.column,
            store = _ref2.store,
            $index = _ref2.$index;
        var disabled = column.selectable ? !column.selectable.call(null, row, $index) : false;
        return h("bk-checkbox", {
          "nativeOn": {
            "click": [function (event) {
              return event.stopPropagation();
            }, function () {
              !disabled && store.commit('rowSelectedChanged', row);
            }]
          },
          "attrs": {
            "checked": store.isSelected(row),
            "disabled": disabled
          }
        });
      },
      sortable: false,
      resizable: false
    },
    index: {
      renderHeader: function renderHeader(h, _ref3) {
        var column = _ref3.column;
        return column.label || '#';
      },
      renderCell: function renderCell(h, _ref4) {
        var $index = _ref4.$index,
            column = _ref4.column;
        var i = $index + 1;
        var index = column.index;
        if (typeof index === 'number') {
          i = $index + index;
        } else if (typeof index === 'function') {
          i = index($index);
        }
        return h("div", [i]);
      },
      sortable: false
    },
    expand: {
      renderHeader: function renderHeader(h, _ref5) {
        var column = _ref5.column;
        return column.label || '';
      },
      renderCell: function renderCell(h, data, proxy) {
        var row = data.row,
            store = data.store;
        var expanded = store.states.expandRows.indexOf(row) > -1;
        return h("div", {
          "class": 'bk-table-expand-icon ' + (expanded ? 'bk-table-expand-icon-expanded' : ''),
          "on": {
            "click": function click(event) {
              return proxy.handleExpandClick(_objectSpread({}, data, {
                event: event
              }));
            }
          }
        }, [h("i", {
          "class": 'bk-icon icon-play-shape'
        })]);
      },
      sortable: false,
      resizable: false,
      className: 'bk-table-expand-column'
    },
    setting: {
      renderHeader: function renderHeader(h, _ref6) {
        var column = _ref6.column,
            fixed = _ref6.fixed;
        if (fixed === 'right') {
          return h("bk-table-setting", {
            "attrs": {
              "column": column
            }
          });
        }
        return '';
      },
      renderCell: function renderCell(h, _ref7, proxy) {
        var row = _ref7.row,
            store = _ref7.store;
        return '';
      },
      sortable: false,
      resizable: false,
      fixed: 'right',
      align: 'center'
    }
  };
  var getDefaultColumn = function getDefaultColumn(type, options) {
    var column = _objectSpread({}, defaults[type || 'default']);
    for (var name in options) {
      if (options.hasOwnProperty(name)) {
        var value = options[name];
        if (typeof value !== 'undefined') {
          column[name] = value;
        }
      }
    }
    if (!column.minWidth) {
      column.minWidth = 80;
    }
    column.realWidth = column.width === undefined ? column.minWidth : column.width;
    return column;
  };
  var DEFAULT_RENDER_CELL = function DEFAULT_RENDER_CELL(h, _ref8) {
    var row = _ref8.row,
        column = _ref8.column,
        $index = _ref8.$index;
    var property = column.property;
    var value = property && getPropByPath(row, property).v;
    if (column && column.formatter) {
      return column.formatter(row, column, value, $index);
    }
    return value;
  };
  var parseWidth = function parseWidth(width) {
    if (width !== undefined) {
      width = _parseInt$2(width, 10);
      if (isNaN(width)) {
        width = null;
      }
    }
    return width;
  };
  var parseMinWidth = function parseMinWidth(minWidth) {
    if (minWidth !== undefined) {
      minWidth = _parseInt$2(minWidth, 10);
      if (isNaN(minWidth)) {
        minWidth = 80;
      }
    }
    return minWidth;
  };
  var TableColumn = {
    name: 'bk-table-column',
    props: {
      type: {
        type: String,
        default: 'default'
      },
      label: String,
      className: String,
      labelClassName: String,
      property: String,
      prop: String,
      width: {},
      minWidth: {},
      renderHeader: Function,
      sortable: {
        type: [String, Boolean],
        default: false
      },
      sortMethod: Function,
      sortBy: [String, Function, Array],
      resizable: {
        type: Boolean,
        default: true
      },
      context: {},
      columnKey: String,
      align: String,
      headerAlign: String,
      showOverflowTooltip: [Boolean, Object],
      fixed: [Boolean, String],
      formatter: Function,
      selectable: Function,
      reserveSelection: Boolean,
      filterMethod: Function,
      filteredValue: Array,
      filters: Array,
      filterPlacement: String,
      filterMultiple: {
        type: Boolean,
        default: true
      },
      filterSearchable: Boolean,
      index: [Number, Function],
      sortOrders: {
        type: Array,
        default: function _default() {
          return ['ascending', 'descending', null];
        },
        validator: function validator(val) {
          return val.every(function (order) {
            return ['ascending', 'descending', null].indexOf(order) > -1;
          });
        }
      },
      beforeExpandChange: Function
    },
    data: function data() {
      return {
        isSubColumn: false,
        columns: []
      };
    },
    beforeCreate: function beforeCreate() {
      this.row = {};
      this.column = {};
      this.$index = 0;
    },
    computed: {
      owner: function owner() {
        var parent = this.$parent;
        while (parent && !parent.tableId) {
          parent = parent.$parent;
        }
        return parent;
      },
      columnOrTableParent: function columnOrTableParent() {
        var parent = this.$parent;
        while (parent && !parent.tableId && !parent.columnId) {
          parent = parent.$parent;
        }
        return parent;
      }
    },
    created: function created() {
      var _this = this;
      var h = this.$createElement;
      this.customRender = this.$options.render;
      if (this.type !== 'setting') {
        this.$options.render = function (h) {
          return h('div', _this.$slots.default);
        };
      } else {
        this.$options.render = function (h) {
          _this.columnConfig.settingContent = function (h) {
            return _this.$slots.default;
          };
          return h('div');
        };
      }
      var parent = this.columnOrTableParent;
      var owner = this.owner;
      this.isSubColumn = owner !== parent;
      this.columnId = (parent.tableId || parent.columnId) + '-column-' + columnIdSeed++;
      var type = this.type;
      var width = parseWidth(this.width);
      var minWidth = parseMinWidth(this.minWidth);
      var isColumnGroup = false;
      var column = getDefaultColumn(type, {
        id: this.columnId,
        columnKey: this.columnKey,
        label: this.label,
        className: this.className,
        labelClassName: this.labelClassName,
        property: this.prop || this.property,
        type: type,
        renderCell: null,
        renderHeader: this.renderHeader,
        minWidth: minWidth,
        width: width,
        isColumnGroup: isColumnGroup,
        context: this.context,
        align: this.align ? 'is-' + this.align : undefined,
        headerAlign: this.headerAlign ? 'is-' + this.headerAlign : this.align ? 'is-' + this.align : undefined,
        sortable: this.sortable === '' ? true : this.sortable,
        sortMethod: this.sortMethod,
        sortBy: this.sortBy,
        resizable: this.resizable,
        showOverflowTooltip: this.showOverflowTooltip,
        formatter: this.formatter,
        selectable: this.selectable,
        reserveSelection: this.reserveSelection,
        fixed: this.fixed === '' ? true : this.fixed,
        filterMethod: this.filterMethod,
        filters: this.filters,
        filterable: this.filters,
        filterMultiple: this.filterMultiple,
        filterOpened: false,
        filteredValue: this.filteredValue || [],
        filterPlacement: this.filterPlacement || '',
        filterSearchable: this.filterSearchable,
        index: this.index,
        sortOrders: this.sortOrders,
        order: null,
        beforeExpandChange: this.beforeExpandChange
      });
      var source = forced[type] || {};
      keys$1(source).forEach(function (prop) {
        var value = source[prop];
        if (value !== undefined) {
          if (prop === 'renderHeader') {
            if (type === 'selection' && column[prop]) {
              console.warn('[Magic Warn][TableColumn]Selection column doesn\'t allow to set render-header function.');
            } else {
              value = column[prop] || value;
            }
          }
          column[prop] = prop === 'className' ? "".concat(column[prop], " ").concat(value) : value;
        }
      });
      this.columnConfig = column;
      var renderCell = column.renderCell;
      var _self = this;
      if (type === 'expand') {
        owner.renderExpanded = function (h, data) {
          return _self.$scopedSlots.default ? _self.$scopedSlots.default(data) : _self.$slots.default;
        };
        column.renderCell = function (h, data) {
          return h("div", {
            "class": "cell"
          }, [renderCell(h, data, this._renderProxy)]);
        };
        return;
      }
      if (type === 'setting') {
        column.settingContent = function (h) {
          return _self.$slots.default;
        };
      }
      column.renderCell = function (h, data) {
        if (_self.$scopedSlots.default) {
          renderCell = function renderCell() {
            return _self.$scopedSlots.default(data);
          };
        }
        if (!renderCell) {
          renderCell = DEFAULT_RENDER_CELL;
        }
        if (_self.showOverflowTooltip) {
          var config = _typeof(_self.showOverflowTooltip) === 'object' ? _self.showOverflowTooltip : {};
          return h("div", {
            "class": "cell",
            "directives": [{
              name: "bk-overflow-tips",
              value: config
            }]
          }, [renderCell(h, data)]);
        }
        return h("div", {
          "class": "cell"
        }, [renderCell(h, data)]);
      };
    },
    destroyed: function destroyed() {
      if (!this.$parent) return;
      var parent = this.$parent;
      this.owner.store.commit('removeColumn', this.columnConfig, this.isSubColumn ? parent.columnConfig : null);
    },
    watch: {
      label: function label(newVal) {
        if (this.columnConfig) {
          this.columnConfig.label = newVal;
        }
      },
      prop: function prop(newVal) {
        if (this.columnConfig) {
          this.columnConfig.property = newVal;
        }
      },
      property: function property(newVal) {
        if (this.columnConfig) {
          this.columnConfig.property = newVal;
        }
      },
      filters: function filters(newVal) {
        if (this.columnConfig) {
          this.columnConfig.filters = newVal;
        }
      },
      filterMultiple: function filterMultiple(newVal) {
        if (this.columnConfig) {
          this.columnConfig.filterMultiple = newVal;
        }
      },
      align: function align(newVal) {
        if (this.columnConfig) {
          this.columnConfig.align = newVal ? 'is-' + newVal : null;
          if (!this.headerAlign) {
            this.columnConfig.headerAlign = newVal ? 'is-' + newVal : null;
          }
        }
      },
      headerAlign: function headerAlign(newVal) {
        if (this.columnConfig) {
          this.columnConfig.headerAlign = 'is-' + (newVal || this.align);
        }
      },
      width: function width(newVal) {
        if (this.columnConfig) {
          this.columnConfig.width = parseWidth(newVal);
          this.owner.store.scheduleLayout();
        }
      },
      minWidth: function minWidth(newVal) {
        if (this.columnConfig) {
          this.columnConfig.minWidth = parseMinWidth(newVal);
          this.owner.store.scheduleLayout();
        }
      },
      fixed: function fixed(newVal) {
        if (this.columnConfig) {
          this.columnConfig.fixed = newVal;
          this.owner.store.scheduleLayout(true);
        }
      },
      sortable: function sortable(newVal) {
        if (this.columnConfig) {
          this.columnConfig.sortable = newVal;
        }
      },
      index: function index(newVal) {
        if (this.columnConfig) {
          this.columnConfig.index = newVal;
        }
      },
      formatter: function formatter(newVal) {
        if (this.columnConfig) {
          this.columnConfig.formatter = newVal;
        }
      },
      className: function className(newVal) {
        if (this.columnConfig) {
          this.columnConfig.className = newVal;
        }
      },
      labelClassName: function labelClassName(newVal) {
        if (this.columnConfig) {
          this.columnConfig.labelClassName = newVal;
        }
      }
    },
    mounted: function mounted() {
      var owner = this.owner;
      var parent = this.columnOrTableParent;
      var columnIndex;
      if (!this.isSubColumn) {
        columnIndex = [].indexOf.call(parent.$refs.hiddenColumns.children, this.$el);
      } else {
        columnIndex = [].indexOf.call(parent.$el.children, this.$el);
      }
      owner.store.commit('insertColumn', this.columnConfig, columnIndex, this.isSubColumn ? parent.columnConfig : null);
    }
  };

  function setInstaller (component, afterInstall) {
    component.install = function (Vue) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var props = component.props || {};
      keys$1(options).forEach(function (key) {
        if (props.hasOwnProperty(key)) {
          if (typeof props[key] === 'function' || props[key] instanceof Array) {
            props[key] = {
              type: props[key],
              default: options[key]
            };
          } else {
            props[key].default = options[key];
          }
        }
      });
      component.name = options.namespace ? component.name.replace('bk', options.namespace) : component.name;
      Vue.component(component.name, component);
      typeof afterInstall === 'function' && afterInstall(Vue, options);
    };
  }

  setInstaller(TableColumn);

  exports.default = TableColumn;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
